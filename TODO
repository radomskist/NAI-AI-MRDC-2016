Being taken care of by other members:
==================================
		-Ball color identification needs to be done
		-QR reading

	-Look for posts on edge of map?

	-Make window that prints values
		+Battery
		+CPU temp
		+What drivemanager is doing
		+Any important info



TEST:
===========================
	-Make sure had a second to warm up
	-Fix crashing (Might be fixed?)

	-RGB + Depth left right middle checks

	-Alternative to X forwarding
		(VLC with Webm settings)

	GOTO DOOR OPENING STATE
		-Go into door open state


NAI TODO:
==========================
General:
	-club laptop freezes after sleeping

Kinect RGB
	-Remember floor color for successful check

STATES:
	-Scan state find object
		+Scan for key points

	-Open door state (initialized)
		>if door is facing us
			>raise arm, go foward, lower arm, back up, use contour on door to see where it begins and ends
			>when door ends in middle turn 20 degrees to the right and drive foward
			>Could also just look for the arm
		>Othewise ram into door

	NAIBRAIN STATE ORDER {
		>Initial state (DONE! Needs testing)

		while(dispensers used < total dispensers) {
			>Go into room (initialized)
				+Goto nearest unused dispenser

			>operate dispensers (initialized)
				+Line up dispenser
				+get & check balls
				+mark dispenser as used

			>Return balls (initialized)
				+Goto our ball box
				+Open ball box
				+Drop ball
		}

		(extra)
		>explore map 
			+open doors,etc for extra points
	}


AI:
	(MAYBE)
		After the halfway mark make an override which instantly loads the entire actual map into NAIs memory

	-Make sure drive manager doesn't get stuck if overshoots node
	-Check if path is still valid
	-If path was successful mark each space with -1 likelyness. Meaning there is 0 chance it is a wall.
	-Verification of walls (qr codes) is -2, meaning it's 100% a wall
	-Make sure to check if NAI gets stuck
	-World map needs support for doors
		>add entities to memory map grid
		>Drive manager has to know what to do when gets to door (go into door open state)
		>likelyness for doors
	-Make sure objects located aren't outside of the map (if 0 on depth assume +4.5 meters)

Extras:
=====================
	(kinect)
	-Need to fix kinect lense
	-Double check rgb and depth allignment
	-Stop kinect from flooding logger
	-Save approx location of robot when images where taken?
	-Localizataion
		+remember where wall closest to center was last time it was seen.
	(AI)
	-Make path finding not assume goal isn't blocked
	-Fine path finding
	-Make coarse path finding go diagnol when can
	-Make coarse path finding check which path is shortest
	(sdl)
	-Generate ID# for map so it only updates when changed
	-Optimize opengl window
		+Make sure no gl things are called when context isn't current
	(laptop)
	-Multithread
	-Nvidia drives (check if openkinect needs anymore nvidia crap)
	(Depth)
	-Make depth camera check if walls that fail are two walls and a gap
	-Use blob detection to identify other robots?
	(Web camera)
	-See where golf ball dispenser is
